extends ../layouts/with-sidebar

block documentation
  section
    div
      h2 Usage with Express.JS

      h3#introduction Introduction
      p.
        This article explains the usage of Sequelize with the MVC framework Express.
        You will learn how and where to define models and how to load them when needed.

      h3#minimal-express-app A minimal express application
      p.
        In order to create a minimal express application, we need to install
        express first and scaffold a project. We can do this via the following
        commands:

      pre.dark-blue
        code.bash.
          mkdir example-app
          cd example-app
          npm install express express-generator
          node_modules/.bin/express . -f
          npm install
          ./bin/www

      p.
        You should now be able to see a tiny welcome page on
        <code>http://localhost:3000</code>.

      h3#adding-sequelize Adding Sequelize to the application

      p.
        Now that we have the express application in place, we can start adding
        Sequelize to it. What we need for that are the following packages:
        sequelize, sequelize-cli, sqlite3. Please note, that for the sake of
        simplicity this tutorial will use SQLite.

      pre.dark-blue
        code.bash.
          npm install --save sequelize@2.0.0-rc1 sequelize-cli sqlite3

      p.
        This will install the respective packages and uses the upcoming major
        release of sequelize. We can now let the sequelize CLI initialize the
        project's directory:

      pre.dark-blue
        code.bash.
          node_modules/.bin/sequelize init

      p.
        Running this command will create the folders <code>config</code>,
        <code>migrations</code> and <code>models</code>.


      h3#the-application Implementing a todo app
      p.
        As an example application we will create a very basic and simple todo
        tool, which allows the creation of users and the management of their
        tasks.

      h4#bin-www bin/www
      p.
        In order to create a maintainable application, we will put all the
        database logic into the <code>models</code> folder. When the application
        gets fired up, sequelize will sync the models with the database and
        afterwards start the server. This way we don't clutter the application
        while making use of sequelize's features.
      != fromGithub("sequelize", "express-example", "bin/www")

      h4#models-index-js models/index.js
      p.
        This file has been generated with the sequelize CLI and collects all
        the models from the <code>models</code> directory and associates them
        if needed.
      != fromGithub("sequelize", "express-example", "models/index.js")

      h4#models-user-js models/user.js
      p.
        All models of our application are located as separate files in the
        <code>models</code> folder. If you want to add a new model, just add it
        to this folder and everything will work automagically. Also you can
        use the sequelize CLI's <code>sequelize model:create</code>.

      p.
        <strong>Notice</strong> that the <code>associate</code> method
        receives a parameter <code>models</code>, which contains every
        declared model within the models directory.
      != fromGithub("sequelize", "express-example", "models/user.js")

      h4#task-js models/task.js
      p.
        The other needed model is <code>Task</code>. It relates to the
        <code>User</code>.
      != fromGithub("sequelize", "express-example", "models/task.js")

      h4#routes-index routes/index.js
      p.
        The file <code>routes/index.js</code> contains the logic for a request
        against the main homepage. It loads the models module and uses it to
        load all the users and tasks from the database.
      != fromGithub("sequelize", "express-example", "routes/index.js")

      p.
        This will allow us to iterate over the users in the view file.
        We will skip the rest of the route files for this article.

      h4#view-index views/index.jade
      p.
        As we passed the users to the view and include the tasks for each user,
        we can access the data in the view's template file. Besides listing the
        users and tasks, there are also forms for creating new instances.
      != fromGithub("sequelize", "express-example", "views/index.jade")

      h3#whats-next What's next?
      p.
        This article shows a basic approach of how to integrate Sequelize
        into an ExpressJS application. It allows the very easy management of
        models by adding new files to a specific folder. Starting the application
        will automatically sync the schema with the database.

      p.
        If you don't want to have automatic schema synchronization and instead want
        migrations, just add a respective step to your deployment script. When
        you use the CLI for the model generation, you will gain the migration
        scripts for free as well.

      p.
        You can find the complete application code
        <a href="https://github.com/sequelize/express-example" target="_blank" rel="nofollow">on Github</a>.
        Feel free to add pull requests to it.

      p.
        Besides the use of Sequelize as model backend in your ExpressJS application,
        you might also want to turn your server into a restful API. If that is the
        case, check out <a href="https://github.com/sequelize/sequelize-restful" target="_blank" rel="nofollow">the repository on Github</a>.
